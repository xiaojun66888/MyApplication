package com.example.myapplication;import static android.content.Context.MODE_PRIVATE;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.StreamCorruptedException;import java.util.Set;import java.util.TreeSet;import android.content.Context;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.text.TextUtils;import android.util.Base64;/** * 轻量缓存数据 * * @projectName:weInternet * @author:xiaoj * @date:2017年6月27日 上午10:52:22 * @version 1.0 */public class SpUtils {    private static SharedPreferences mPreferences;    public static SharedPreferences getSp(Context context) {        if (mPreferences == null) {            mPreferences = context.getSharedPreferences("test", Context.MODE_PRIVATE);        }        return mPreferences;    }    /**     * 获得String类型的值，没有时默认值为null     *     * @param context     * @param key     * @return     */    public static String getString(Context context, String key) {        return getString(context, key, null);    }    /**     * 获得String类型的数据     *     * @param context     * @param key     * @param defValue     * @return     */    public static String getString(Context context, String key, String defValue) {        SharedPreferences sp = getSp(context);        return sp.getString(key, defValue);    }    /**     * 设置String类型的值     *     * @param context     * @param key     * @param value     */    public static void putString(Context context, String key, String value) {        SharedPreferences sp = getSp(context);        Editor editor = sp.edit();        editor.putString(key, value);        editor.commit();    }    /**     * sp保存一个int数据 author xiaojun     *     * @param value     */    public static void putSPValue(Context context, String key, int value) {        getSp(context).edit().putInt(key, value).commit();    }    /**     * sp保存一个String数据 author xiaojun     *     * @param valueKey     * @param value     */    public static void putSPValue(Context context, String valueKey, String value) {        getSp(context).edit().putString(valueKey, value).commit();    }    /**     * sp保存一个float数据 author xiaojun     *     * @param valueKey     * @param value     */    public static void putSPValue(Context context, String valueKey, Float value) {        getSp(context).edit().putFloat(valueKey, value).commit();    }    /**     * sp保存一个boolean数据     *     * @param valueKey     * @param value     */    public static void putSPValue(Context context, String valueKey, boolean value) {        getSp(context).edit().putBoolean(valueKey, value).commit();    }    /**     * sp保存一个long数据     *     * @param valueKey     * @param value     */    public static void putSPValue(Context context, String valueKey, long value) {        getSp(context).edit().putLong(valueKey, value).commit();    }    /**     * sp获取一个int数据     *     * @param valueKey     */    public static int getSPValue(Context context, String valueKey, int defValue) {        return getSp(context).getInt(valueKey, defValue);    }    /**     * sp获取一个String数据     *     * @param valueKey     */    public static String getSPValue(Context context, String valueKey, String defValue) {        return getSp(context).getString(valueKey, defValue);    }    /**     * sp获取一个foloat数据     *     * @param valueKey     */    public static float getSPValue(Context context, String valueKey, float defValue) {        return getSp(context).getFloat(valueKey, defValue);    }    /**     * sp获取一个boolean数据     *     * @param valueKey     */    public static boolean getSPValue(Context context, String valueKey, boolean defValue) {        return getSp(context).getBoolean(valueKey, defValue);    }    /**     * sp获取一个long数据     *     * @param valueKey     */    public static long getSPValue(Context context, String valueKey, long defValue) {        return getSp(context).getLong(valueKey, defValue);    }    /**     * 清理sp数据     */    public static void clear(Context context) {        getSp(context).edit().clear().commit();    }    /**     * sp保存对象 要保存的对象，只能保存实现了serializable的对象     *     * @param context     * @param key     *            存储名     * @param obj     *            对象     * @author:xiaoj     * @createTime:2017年7月26日 上午10:41:11     */    public static void putObject(Context context, String key, Object obj) {        try {            // 先将序列化结果写到byte缓存中，其实就分配一个内存空间            if (obj != null) {                ByteArrayOutputStream baos = new ByteArrayOutputStream();                ObjectOutputStream os = new ObjectOutputStream(baos);                // 将对象序列化写入byte缓存                os.writeObject(obj);                // 将字节流编码成base64的字符窜                byte[] bytes = baos.toByteArray();                String obj_base64 = Base64.encodeToString(bytes, Base64.DEFAULT);                getSp(context).edit().putString(key, obj_base64).commit();            } else {                getSp(context).edit().putString(key, "").commit();            }        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * 获取sp里面的obj     *     * @param context     * @param key     *            存储名     * @return     * @author:xiaoj     * @createTime:2017年7月26日 上午10:42:17     */    public static Object getObject(Context context, String key) {        try {            if (getSp(context).contains(key)) {                String string = getSp(context).getString(key, "");                if (TextUtils.isEmpty(string)) {                    return null;                } else {                    // 读取字节                    byte[] base64 = Base64.decode(string.getBytes(), Base64.DEFAULT);                    // 封装到字节流                    ByteArrayInputStream bis = new ByteArrayInputStream(base64);                    // 再次封装                    ObjectInputStream is = new ObjectInputStream(bis);                    // 读取对象                    Object readObject = is.readObject();                    return readObject;                }            }        } catch (StreamCorruptedException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (ClassNotFoundException e) {            e.printStackTrace();        }        // 所有异常返回null        return null;    }    /**     * sp保存一个set数据     *     * @param valueKey     */    public static void putSPValue(Context context, String key, Set<String> valueKey) {        getSp(context).edit().putStringSet(key, valueKey).commit();    }    public static Set<String> getSpValue(Context context, String key, Set<String> valueKey) {        Set<String> sets = getSp(context).getStringSet(key, valueKey);        TreeSet<String> treeSet = new TreeSet<String>();        treeSet.addAll(sets);        return treeSet;    }    /**     * 判断应用程序是否是第一次运行     *     * @param context     * @return     * @author:xiaoj     * @createTime:2017年7月28日 上午10:57:19     */    public static boolean isFirst(Context context) {        SharedPreferences sp = context.getSharedPreferences("isFirst", MODE_PRIVATE);        boolean isFirst = sp.getBoolean("isFirst", true);        if (isFirst) {            sp.edit().putBoolean("isFirst", false).commit();        }        return isFirst;    }    /**     * 上报经纬度/通讯录     * @param context     * @return     * @author:xiaoj     * @createTime:2018年7月20日 下午5:36:13     */    public static boolean is1stUpload(Context context, String valueKey) {        boolean isFirst = getSp(context).getBoolean(valueKey, true);        if (isFirst) {            getSp(context).edit().putBoolean(valueKey, false).commit();        }        return isFirst;    }}